{"version":3,"file":"static/js/460.4649a8ce.chunk.js","mappings":"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","sources":["../../../../../../\u0000#PROG/React/projects/02-second-project2022/react-2/src/components/Profile/Profile.module.css","../../../../../../\u0000#PROG/React/projects/02-second-project2022/react-2/src/components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileFormData.jsx","../../../../../../\u0000#PROG/React/projects/02-second-project2022/react-2/src/components/Profile/MyPosts/MyPosts.module.css","../../../../../../\u0000#PROG/React/projects/02-second-project2022/react-2/src/components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.jsx","components/FormValidation/PostFormSchema.js","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"ProfileInfo_description__945PC\",\"head_img\":\"ProfileInfo_head_img__jr6KZ\",\"main_description\":\"ProfileInfo_main_description__BIpMc\",\"main_description_pers\":\"ProfileInfo_main_description_pers__hr16D\",\"status_wrapper\":\"ProfileInfo_status_wrapper__TgDcy\",\"status\":\"ProfileInfo_status__IqauL\",\"status_input\":\"ProfileInfo_status_input__MR1Ys\",\"profile_photo\":\"ProfileInfo_profile_photo__4EN0L\",\"photo_choose\":\"ProfileInfo_photo_choose__9rGVY\",\"description_block\":\"ProfileInfo_description_block__QJedc\",\"contacts_block\":\"ProfileInfo_contacts_block__x0rTr\",\"contact_name\":\"ProfileInfo_contact_name__4vZGB\",\"form_error\":\"ProfileInfo_form_error__AHbDV\",\"edit_form\":\"ProfileInfo_edit_form__KSH9-\",\"edit_btn\":\"ProfileInfo_edit_btn__ohYtr\",\"save_changes_btn\":\"ProfileInfo_save_changes_btn__9ZOGS\"};","import React, {useEffect, useState} from \"react\";\r\nimport classes from './ProfileInfo.module.css'\r\n\r\nconst ProfileStatusWithHooks = props => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        if(props.isOwner) {\r\n            setEditMode(true)\r\n        }\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!editMode &&\r\n                <div className={classes.status_wrapper}>\r\n                    <span\r\n                        className={classes.status}\r\n                        onDoubleClick={activateEditMode}\r\n                    >\r\n                        {props.status || \"------\"}\r\n                    </span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input\r\n                        className={classes.status_input}\r\n                        autoFocus={true}\r\n                        value={status}\r\n                        onChange={onStatusChange}\r\n                        onBlur={deactivateEditMode}\r\n                        placeholder='Your status'\r\n                    />\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport {Formik, Form, Field} from \"formik\";\r\nimport classes from \"./ProfileInfo.module.css\";\r\nimport {FormikControl} from \"../../Forms/FormikControl\";\r\nimport {clsx} from \"clsx\";\r\n\r\nexport const ProfileDataForm = ({profile, saveProfile, deactivateEditMode}) => {\r\n    const initialValues = {\r\n        fullName: profile.fullName || '',\r\n        aboutMe: profile.aboutMe || '',\r\n        lookingForAJob: profile.lookingForAJob,\r\n        lookingForAJobDescription: profile.lookingForAJobDescription || '',\r\n        contacts: {\r\n            facebook: profile.contacts['facebook'] || '',\r\n            website: profile.contacts['website'] || '',\r\n            vk: profile.contacts['vk'] || '',\r\n            twitter: profile.contacts['twitter'] || '',\r\n            instagram: profile.contacts['instagram'] || '',\r\n            youtube: profile.contacts['youtube'] || '',\r\n            github: profile.contacts['github'] || '',\r\n            mainLink: profile.contacts['mainLink'] || '',\r\n        }\r\n    }\r\n\r\n    const onSubmit = (values, action) => {\r\n        saveProfile(values, action.setStatus).then(() => {\r\n            deactivateEditMode()\r\n            action.setSubmitting(false)\r\n        })\r\n        action.setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n        <Formik initialValues={initialValues} onSubmit={onSubmit}>\r\n            {\r\n                formik => {\r\n                    return (\r\n                        <Form className={classes.edit_form}>\r\n                            <button\r\n                                type='submit'\r\n                                disabled={formik.isSubmitting}\r\n                                className={clsx('btn', classes.save_changes_btn)}\r\n\r\n                            >\r\n                                Save changes\r\n                            </button>\r\n                            <div className={classes.form_error}>\r\n                                {formik.status}\r\n                            </div>\r\n                            <div className={classes.description_block}>\r\n                                <h2>Full name:</h2>\r\n                                <FormikControl\r\n                                    control='input'\r\n                                    name='fullName'\r\n                                />\r\n                            </div>\r\n                            <div className={classes.description_block}>\r\n                                <h2>About me:</h2>\r\n                                <FormikControl\r\n                                    control='textarea'\r\n                                    name='aboutMe'\r\n                                />\r\n                            </div>\r\n\r\n                            <div className={classes.description_block}>\r\n                                <h2>Looking for a job</h2>\r\n                                <Field type=\"checkbox\" name='lookingForAJob' />\r\n                            </div>\r\n\r\n\r\n                            <div className={classes.description_block}>\r\n                                <h2>Skills description: </h2>\r\n                                <FormikControl\r\n                                    control='textarea'\r\n                                    name='lookingForAJobDescription'\r\n                                />\r\n                            </div>\r\n\r\n                            <div className={classes.description_block}>\r\n                                <h2>Contacts</h2>\r\n                                {Object.keys(profile.contacts).map(key => {\r\n                                    return (\r\n                                        <div key={key} className={classes.contacts_block}>\r\n                                            <h3 className={classes.contact_name}>{key}</h3>\r\n                                            <FormikControl\r\n                                                control='input'\r\n                                                name={'contacts.' + key}/>\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n\r\n                        </Form>\r\n                    )\r\n                }\r\n            }\r\n        </Formik>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"posts_header\":\"MyPosts_posts_header__PqCxF\",\"post_field\":\"MyPosts_post_field__JBC3B\",\"submit_btn\":\"MyPosts_submit_btn__W27Th\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__NDEuW\",\"desc\":\"Post_desc__JS5Pl\",\"likes\":\"Post_likes__m6sjG\"};","import classes from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <div className={classes.desc}>\r\n                <img src=\"https://cdn-icons-png.flaticon.com/512/147/147142.png\" alt=\"\"/>\r\n                <span>{props.message}</span>\r\n            </div>\r\n\r\n            <div className={classes.likes}>\r\n                <span>{props.likesCount} Likes</span>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Post;","import * as Yup from \"yup\";\r\n\r\nconst postFormSchema = Yup.object({\r\n    postText: Yup.string().required('Required')\r\n});\r\nexport default postFormSchema;","import React from \"react\";\r\nimport classes from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {Form, Formik} from \"formik\";\r\nimport {FormikControl} from \"../../Forms/FormikControl\";\r\nimport postFormSchema from \"../../FormValidation/PostFormSchema\";\r\n\r\nconst MyPosts = props => {\r\n    let postsElements = [...props.posts].reverse()\r\n        .map(post =>\r\n            <Post\r\n                message={post.message}\r\n                likesCount={post.likesCount}\r\n                key={post.id}\r\n            />\r\n        )\r\n    let onAddPost = (text) => {\r\n        props.addPost(text)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3 className={classes.posts_header}>My posts</h3>\r\n\r\n            <PostForm onAddPost={onAddPost}/>\r\n\r\n            {postsElements}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nconst initialValues = {\r\n    postText: ''\r\n}\r\n\r\nconst PostForm = (props) => {\r\n    const onSubmit = (values, actions) => {\r\n        actions.resetForm()\r\n        console.log(values)\r\n        props.onAddPost(values.postText)\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={initialValues}\r\n            onSubmit={onSubmit}\r\n            validationSchema={postFormSchema}\r\n        >\r\n            {\r\n                formik => {\r\n                    return (\r\n                        <Form className={classes.post_field}>\r\n                            <FormikControl\r\n                                control='textarea'\r\n                                name='postText'\r\n                                noError={true}\r\n                                placeholder='Your post'\r\n                            />\r\n\r\n                            <button\r\n                                type='submit'\r\n                                disabled={!formik.isValid}\r\n                                className={`${classes.submit_btn} btn`}\r\n                            >\r\n                                Post\r\n                            </button>\r\n                        </Form>\r\n                    )\r\n                }\r\n            }\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default MyPosts;","import {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (text) => {\r\n            dispatch(addPostActionCreator(text));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport classes from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from '../../../assets/images/01.png'\r\nimport {useState} from \"react\";\r\nimport {ProfileDataForm} from \"./ProfileFormData\";\r\nimport { clsx } from 'clsx';\r\nimport MyPostsContainer from \"../MyPosts/MyPostsContainer\";\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onProfilePhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.content}>\r\n            <div className={classes.description}>\r\n                <div className={classes.main_description}>\r\n                    <div className={classes.main_description_pers}>\r\n                        <img className={classes.profile_photo} src={profile.photos.large || userPhoto} alt=''/>\r\n                        <h1>{profile.fullName}</h1>\r\n                    </div>\r\n                    {isOwner && !editMode\r\n                        ? <button onClick={() => setEditMode(true)}\r\n                                  className={clsx('btn', classes.edit_btn)}>Edit profile</button>\r\n                        : null\r\n                    }\r\n                </div>\r\n\r\n                {isOwner &&\r\n                    <label className={classes.photo_choose}>\r\n                        Choose a profile photo\r\n                        <input type=\"file\" onChange={onProfilePhotoSelected}/>\r\n                    </label>\r\n                }\r\n                {editMode\r\n                    ? <ProfileDataForm\r\n                        profile={profile}\r\n                        saveProfile={saveProfile}\r\n                        deactivateEditMode={() => setEditMode(false)}\r\n                    />\r\n                    : <>\r\n                        <ProfileData\r\n                            profile={profile}\r\n                            status={status}\r\n                            updateStatus={updateStatus}\r\n                            isOwner={isOwner}\r\n                            onProfilePhotoSelected={onProfilePhotoSelected}\r\n                            activateEditMode={() => setEditMode(true)}\r\n                        />\r\n                        <MyPostsContainer />\r\n                    </>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst ProfileData = ({profile, status, updateStatus, isOwner}) => {\r\n    return (\r\n        <div>\r\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus} isOwner={isOwner}/>\r\n\r\n            {profile.aboutMe &&\r\n                <div className={classes.description_block}>\r\n                    <h2>About me</h2>\r\n                    <p>{profile.aboutMe}</p>\r\n                </div>\r\n            }\r\n\r\n            <div className={classes.description_block}>\r\n                <h2>Looking for a job:</h2> {profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n\r\n            {profile.lookingForAJobDescription &&\r\n                <div className={classes.description_block}>\r\n                    <h2>Skills description: </h2> {profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n\r\n\r\n            <div className={classes.description_block}>\r\n                <h2>Contacts</h2>\r\n                {Object.keys(profile.contacts).map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div>\r\n            <b>{contactTitle}</b>: {contactValue}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import classes from './Profile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div className={classes.content}>\r\n            <ProfileInfo\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                savePhoto={props.savePhoto}\r\n                saveProfile={props.saveProfile}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport withRouter from \"../../help_func/withRouter\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n    refreshProfile() {\r\n        let profileId = this.props.router.params.profileId;\r\n        if (!profileId) {\r\n            profileId = this.props.userId;\r\n        }\r\n\r\n        this.props.getUserProfile(profileId);\r\n        this.props.getStatus(profileId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.router.params.profileId !== prevProps.router.params.profileId)\r\n            this.refreshProfile();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                isOwner={!this.props.router.params.profileId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    userId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect,\r\n)(ProfileContainer)\r\n","import React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport withRouter from \"../help_func/withRouter\";\r\n\r\nconst mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth && !this.props.router.params.profileId) return <Navigate to={'/login'}/>;\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    return withRouter(connect(mapStateToPropsForRedirect)(RedirectComponent))\r\n}"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","className","classes","onDoubleClick","isOwner","autoFocus","value","onChange","e","currentTarget","onBlur","updateStatus","placeholder","ProfileDataForm","profile","saveProfile","deactivateEditMode","initialValues","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","onSubmit","values","action","then","setSubmitting","formik","type","disabled","isSubmitting","clsx","FormikControl","control","name","Object","keys","map","key","src","alt","message","likesCount","Yup","postText","required","PostForm","actions","resetForm","console","log","onAddPost","validationSchema","postFormSchema","noError","isValid","postsElements","posts","reverse","post","id","text","addPost","connect","state","profilePage","dispatch","addPostActionCreator","MyPosts","ProfileData","Contact","contactTitle","contactValue","savePhoto","Preloader","onProfilePhotoSelected","target","files","length","photos","large","userPhoto","onClick","activateEditMode","ProfileContainer","profileId","this","router","params","userId","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","React","compose","auth","isAuth","withRouter","withAuthRedirect","mapStateToPropsForRedirect","Component","RedirectComponent","to"],"sourceRoot":""}